
#####################################
#                                   #
#       Request for Company         #
#                                   #
#####################################

# find company which location is equal to the parameter
# native Sql query
Company.findByLocation=Select * from company c where c.location = :location order by c.name desc

# Request to count company which location is equal to the parameter
# native Sql query
Company.findCountByLocation=Select count(c.id) from company c where c.location = :location group by c.location

# find company which location is equal to the parameter
# same but not native query
Company.findByLocationV2=Select c from Company c where c.location = :location order by c.name 

# find the latest id of the company's table
# native Sql query
Company.findLatestId=SELECT MAX(c.id) FROM company c


#####################################
#                                   #
#       Request for Building        #
#                                   #
#####################################


#####################################
#                                   #
#       Request for Scope3          #
#                                   #
#####################################
Entity_map.districtCons=select Sum(quant_cons) as C from entity_map em  where em.id_ecdt= :id ;
Entity_map.districtProd=select Sum(quant_prod) as P from entity_map em  where em.id_ecdt= :id ;

#####################################
#                                   #
#       Request for Message         #
#                                   #
#####################################
# find all messages between two people
Message.findAllMessagesBetweenTwoPeople=SELECT * from messages where id_sender = :id_sender and id_receiver = :id_receiver or id_sender = :id_receiver and id_receiver = :id_sender order by date_send, time_send  
# find all id of contact of the user
Message.findAllContactOfOneUser= select distinct(u.id), first_name as firstName, email, last_name as lastName, status from users u inner join employee e on e.id_employee = u.id where u.id  in (select distinct(u.id) from messages m inner join users u on u.id = m.id_sender or u.id = m.id_receiver where m.id_sender = :id_sender or m.id_receiver = :id_sender) and u.id <> :id_sender and e.id_company = :idCompany

Message.lastId=select max(id_message) from messages;
Message.getFile= select msg from messages where id_message = :numberFile and date_send = :dateMessage and time_send = :timeMessage
#####################################
#                                   #
#       Request for Users           #
#                                   #
#####################################
#check Email
Users.checkEmail = Select 1 from users where email = :email
#select one specific user
Users.selectUser = Select * from users where email = :email
Users.selectUserWithId = Select * from users where id = :id

#select users with lastName or firstName
Users.selectUsersWithFirstNameOrLastName = select * from (Select id_employee as id,first_name as firstName, email, last_name as lastName, status ,id_company from employee e inner join users u on e.id_employee = u.id where last_name ilike %:value% or first_name ilike %:value%) A where id_company = :id_company limit 10

#####################################
#                                   #
#       Request for employee        #
#                                   #
#####################################

#verify if users is a employee
Employee.verifyEmployee = select * from employee where id_employee = :id
#select employee in booking for cron task
Employee.selectIdInBooking = select distinct(a.id_employee) from booking b inner join attend a on a.id_booking = b.id_booking inner join employee e on e.id_employee = a.id_employee where status = 'free' and start_time <= :time and end_time >= :time and day = :day
#select employee out booking with status occupy
Employee.selectIdOutBooking = select distinct(e.id_employee) from attend a inner join employee e on e.id_employee = a.id_employee where a.id_employee not in (select distinct(a.id_employee) from booking b inner join attend a on a.id_booking = b.id_booking inner join employee e on e.id_employee = a.id_employee where start_time <= :time and end_time >= :time and day = :day) and status ='occupy';
#select employee from the same company
Employee.selectEmployeeInCompany = select id,sg,status,id_company,id_role,last_name,first_name,email from employee e inner join users u on u.id = e.id_employee where id_company in( select id_company from company c inner join employee e on e.id_company = c.id where id_employee = :id) and id_employee <> :id order by first_name, last_name
#see status of people in the same company during a period
Employee.getEmployeeInTheSameCompanyButOccupyDuringTime = select id from employee e inner join users u on u.id = e.id_employee where id_company in( select id_company from company c inner join employee e on e.id_company = c.id where id_employee = :id) and id_employee <> :id and id_employee in (select id_employee from attend where id_booking in(select id_booking from booking b inner join room r on r.id_room = b.id_room where start_time <= :startTime and end_time >= :endTime and day = :day and type_room='meetingRoom' union select id_booking from booking b inner join room r on r.id_room = b.id_room where start_time >= :startTime and start_time <= :endTime and day = :day and type_room='meetingRoom' union select id_booking from booking b inner join room r on r.id_room = b.id_room where end_time >= :startTime and end_time <= :endTime and day = :day and type_room='meetingRoom'))
#get email of one employee
Employee.getEmail = select email from users where id = :idPerson
#get name of one employee
Employee.getNamePerson = select concat(last_name, ' ', first_name) from users u where id = :idPerson
#get right for one employee
Employee.getRight = select name from role r inner join employee e on e.id_role = r.id_role where id_employee = :id
#see if employee is dispo 
Employee.seeDispo = select 1 from (select distinct(id_employee) from attend a inner join booking b on b.id_booking = a.id_booking where id_employee = :idPerson  and id_employee not in(select r.id_employee from attend r inner join booking b on b.id_booking = r.id_booking where start_time <= :start and end_time >= :end and day = :day union select r.id_employee from attend r inner join booking b on b.id_booking = r.id_booking where start_time >= :start and start_time <= :end and day = :day union select r.id_employee from attend r inner join booking b on b.id_booking = r.id_booking where end_time >= :start and end_time <= :end and day = :day))A
Employee.getDataPeople = select * from users u inner join employee e on e.id_employee = u.id where id_employee = :idPerson
#####################################
#                                   #
#       Request for favoris         #
#                                   #
#####################################
#select favoris
Favoris.selectFavorisOFOneUser = select distinct(u.id), first_name as firstName, email, last_name as lastName, status from users u inner join employee e on e.id_employee = u.id inner join favoris f on f.id_person2 = e.id_employee where f.id_person1 = :idPerson
#verifyFavoris
Favoris.verifyTwoPeopleFavoris= select 1 from favoris where id_person1 = :idSender and id_person2 = :idReceiver
#####################################
#                                   #
#       Request for attendMeeting   #
#                                   #
#####################################

#selectMaxId
AttendMeeting.selectMaxIdAttend = select max(id_attend) from attend

#select event for one user
AttendMeeting.selectEventForOneUser = select distinct(b.id_booking),day,start_time,end_time,title_event, r.name from booking b inner join room r on r.id_room = b.id_room inner join attend a on a.id_booking = b.id_booking where id_employee = :idUser

#####################################
#                                   #
#       Request for RoomDigital     #
#                                   #
#####################################

#select room
RoomDigital.getRooms= select * from room r limit 10
#capacity of each room
RoomDigital.getCapacity = select count(*) from booking b inner join room r on r.id_room = b.id_room where day = :day and b.id_room = :idRoom
#select meetingroom
RoomDigital.getMeetingRooms= select * from room r where type_room='meetingRoom'
#select room with arguments 
RoomDigital.getRoomsWithSearchMeetingRoom = select * from room r where id_room not in ( select r.id_room from room r inner join booking b on b.id_room = r.id_room where start_time <= :startTime and end_time >= :endTime and day = :day) and id_room not in( select r.id_room from room r inner join booking b on b.id_room = r.id_room where start_time >= :startTime and start_time <= :endTime and day = :day) and id_room not in ( select r.id_room from room r inner join booking b on b.id_room = r.id_room where end_time >= :startTime and end_time <= :endTime and day = :day) and type_room = 'meetingRoom'
#select room with arguments 
RoomDigital.getRoomsWithSearchBureauSolo= select * from room r where type_room = 'bureauSolo' limit 25
#select room with arguments 
RoomDigital.getRoomsWithSearchOpenSpace =  select * from room r where type_room = 'openSpace' limit 25
RoomDigital.getCapacityWithCriterias = select sum(count) from ( select count(r.id_room) from room r inner join booking b on b.id_room = r.id_room where start_time <= :startTime and end_time >= :startTime and end_time < :endTime and day = :day and b.id_room= :idRoom  union select count(r.id_room)  from room r  inner join booking b on b.id_room = r.id_room  where start_time <= :startTime and end_time >= :endTime and day = :day and b.id_room= :idRoom  union select count(r.id_room)  from room r inner join booking b on b.id_room = r.id_room  where end_time >= :endTime and start_time <= :endTime and start_time > :startTime and day = :day and b.id_room= :idRoom)A
#select * from room where id_room not in( select  b.id_room from booking b where b.id_room  in( select r.id_room from room r inner join booking b on b.id_room = r.id_room where start_time <= :startTime and end_time >= :endTime and day = :day and type_room='openSpace' union select r.id_room from room r inner join booking b on b.id_room = r.id_room where start_time >= :startTime and start_time <= :startTime and day = :day and type_room='openSpace' union select r.id_room from room r inner join booking b on b.id_room = r.id_room where end_time >= :endTime and end_time <= :endTime and day = :day and type_room='openSpace') and day = :day group by b.id_room having count(id_room) >= 20) and type_room='openSpace'

#select room with arguments 
RoomDigital.getRoomsWithSearchSalleTravail = select * from room r where type_room = 'salleTravail' limit 25
RoomDigital.insertBooking = insert into booking (day, start_time, end_time, id_person, id_room) values(:day, :startTime, :endTime, :idPerson, :idRoom)

#display calendar for one room
RoomDigital.selectEventForRoom = select distinct(start_time), end_time, case when id_person = :idPerson then title_event when id_employee = :idPerson then title_event when id_person <> :idPerson then 'reunion' end title_event from booking b inner join attend a on a.id_booking = b.id_booking where id_room = :idRoom and day >= :day
#####################################
#                                   #
#       Request for Booking         #
#                                   #
#####################################
#selectMaxId
Booking.selectMaxId = select max(id_booking) from booking
#selectRoomBookedBy Id
Booking.selectRoomBooked = select b.id_room as idroom, day as dayBooking ,start_time as startTime, end_time as endTime,name, floor, type_room as typeroom from booking b inner join room r on r.id_room = b.id_room where id_person = :id and day >= :today order by day, start_time 


#select adress from the habitation
Habitation.selectAdress = select adresse from habitation;

#####################################
#                                   #
#       Request for PRT             #
#                                   #
#####################################
Prt.selectPrtWithLocation = select p.id_prt,status, label,  l.id_location from prt p inner join location_prt lp on lp.id_prt = p.id_prt inner join location l on l.id_location = lp.id_location order by l.id_location
Prt.selectOnePrtWithLocation = select p.id_prt from prt p inner join location_prt lp on lp.id_prt = p.id_prt inner join location l on l.id_location = lp.id_location where status = 'free' and l.id_location = :location limit 1
#####################################
#                                   #
#       Request for Booking Prt     #
#                                   #
#####################################

BookingPrt.selectMaxId = select max(id_booking_prt) from booking_Prt
BookingPrt.countBooking = select count(id_booking_prt) from booking_prt
HistoricBookingPrt.selectMaxIdHistoric = select max(id_booking_prt) from historic_booking_prt
HistoricBookingPrt.countBookingHistoric = select count(id_booking_prt) from historic_booking_prt
HistoricBookingPrt.getBookingPrtOfOneUser = select id_booking_prt as numero, day as date, start_time as heureDepart, file_name , file_path, stops from historic_booking_prt where id_person = :idPerson
HistoricBookingPrt.getDataFromBookingPrt = select first_name as firstName, last_name as lastName, id_person, stops, day, start_time, end_time from historic_booking_prt hbp inner join users u on u.id = hbp.id_person where id_booking_prt = :numberReservation
#####################################
#                                   #
#       Request for LocationPrt     #
#                                   #
#####################################
LocationPrt.idLocationBeforeDeparture = select id_location from location_prt where id_prt = :idPrt
LocationPrt.getIdLocationWithLabel = select id_location from location where label = :label
LocationPrt.updateLocationPrt = update location_prt set id_location = :idLocation, race_progression = :race, time_progression = :timeProgression, day =:day, time_report = :time where id_prt = :idPrt

#####################################
#                                   #
#       Request for BEPOS           #
#                                   #
#####################################
CaptorBepos.updateAllOutsideCaptor = update captor_bepos set data_captor = least(data_captor + 1, 21) where name_captor = 'temperature exterieure';


#####################################
#                                   #
#       Request for RoomBepos       #
#                                   #
#####################################
RoomBepos.getAllRoomsByUserId = select * from room_bepos r inner join\
  \ habitation h on h.id = r.id_hbt inner join users u on h.id_user = u.id where  u.id =:id

ConsumptionBepos.getEquipementByIdRoom = SELECT e.id_equipment, e.nom_equipment, cb.energy_power\
\ FROM equipment_bepos e\
\ INNER JOIN (SELECT num_equipment, MAX(start_time) as max_start_time\
\ FROM consumption_bepos\
\ GROUP BY num_equipment) cb2 ON e.id_equipment = cb2.num_equipment\
\ INNER JOIN consumption_bepos cb ON e.id_equipment = cb.num_equipment AND cb.start_time = cb2.max_start_time\
\ INNER JOIN room_bepos rb ON e.id_room = rb.id_room\
\ WHERE rb.id_room =:idRoom


HeatingBepos.getStatusForEquipment = SELECT state, id_equip FROM heating_bepos WHERE id_equip=:id

HeatingBepos.updateState = update heating_bepos set state = :state where id_equip= :id

LightBepos.updateState = update light_bepos set state = :state where id_equip= :id

TelevisionBepos.updateState = update tv_bepos set state = :state where id_equip= :id

CookerBepos.updateState = update cooker_bepos set state = :state where id_equip= :id


ProductionBepos.getAllProduction = SELECT pb.id_source, name_prod,date_prod, quantity\
\ FROM production_bepos pb\
\ INNER JOIN (SELECT id_source, MAX(date_prod) AS max_date_prod\
\ FROM production_bepos GROUP BY id_source) latest_productions\
\ ON pb.id_source = latest_productions.id_source \
\ AND pb.date_prod = latest_productions.max_date_prod;